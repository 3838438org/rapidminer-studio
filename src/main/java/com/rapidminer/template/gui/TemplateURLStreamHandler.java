/**
 * Copyright (C) 2001-2015 by RapidMiner and the contributors
 *
 * Complete list of developers available at our web site:
 *
 *      http://rapidminer.com
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see http://www.gnu.org/licenses/.
 */
package com.rapidminer.template.gui;

import com.rapidminer.template.Template;
import com.rapidminer.template.TemplateManager;

import java.io.IOException;
import java.io.InputStream;
import java.net.URL;
import java.net.URLConnection;
import java.net.URLStreamHandler;
import java.util.regex.Matcher;
import java.util.regex.Pattern;


/**
 * Resolves URLs in {@link Template} HTML pages including help texts and results. URLs can have the
 * form template://templatename/resources/image.png for a file image.png included in the template's
 * zip file in folder "resources".
 * 
 * It was planned to also implement template://templatename/results/# for results generated by the
 * template where # needs to be the result index, but this has not been done and is currently not
 * required.
 * 
 * @author Simon Fischer
 * 
 */
public class TemplateURLStreamHandler extends URLStreamHandler {

	public static final String URL_SCHEMA_NAME = "template";

	private class InputStreamURLConnection extends URLConnection {

		private InputStream in;

		public InputStreamURLConnection(URL url, InputStream in) {
			super(url);
			this.in = in;
		}

		@Override
		public InputStream getInputStream() throws IOException {
			return in;
		}

		@Override
		public void connect() throws IOException {
			// noop
		}

	}

	@Override
	protected URLConnection openConnection(URL u) throws IOException {
		String name = u.getHost();
		Template template = TemplateManager.getInstance().getTemplateByName(name);
		if (template == null) {
			return null;
		}
		Pattern pathPattern = Pattern.compile("(.+)/(.+)");
		Matcher pathMatcher = pathPattern.matcher(u.getPath());
		if (!pathMatcher.matches()) {
			return null;
		}
		String what = pathMatcher.group(1);
		String resourceName = pathMatcher.group(2);
		switch (what) {
			case "/resources":
				return new InputStreamURLConnection(u, template.getResource(resourceName));
			default:
				return null;
		}
	}

}
